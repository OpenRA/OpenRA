// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2010 the Open Toolkit library.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

namespace OpenTK.Graphics.OpenGL
{
	using System;
	using System.Text;
	using System.Runtime.InteropServices;
	#pragma warning disable 3019
	#pragma warning disable 1591
	#pragma warning disable 1572
	#pragma warning disable 1573

	partial class GL
	{
		[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glEnableClientState")]
		public static void EnableClientState(OpenTK.Graphics.OpenGL.ArrayCap array)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glEnableClientState((OpenTK.Graphics.OpenGL.ArrayCap)array);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawArrays")]
		public static void DrawArrays(OpenTK.Graphics.OpenGL.BeginMode mode, Int32 first, Int32 count)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glDrawArrays((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32)first, (Int32)count);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClearColor")]
		public static void ClearColor(Single red, Single green, Single blue, Single alpha)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glClearColor((Single)red, (Single)green, (Single)blue, (Single)alpha);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClear")]
		public static void Clear(OpenTK.Graphics.OpenGL.ClearBufferMask mask)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glClear((OpenTK.Graphics.OpenGL.ClearBufferMask)mask);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEnable")]
		public static void Enable(OpenTK.Graphics.OpenGL.EnableCap cap)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glEnable((OpenTK.Graphics.OpenGL.EnableCap)cap);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDisable")]
		public static void Disable(OpenTK.Graphics.OpenGL.EnableCap cap)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glDisable((OpenTK.Graphics.OpenGL.EnableCap)cap);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glBlendEquation")]
		public static void BlendEquation(OpenTK.Graphics.OpenGL.BlendEquationMode mode)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glBlendEquation((OpenTK.Graphics.OpenGL.BlendEquationMode)mode);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glBlendFunc")]
		public static void BlendFunc(OpenTK.Graphics.OpenGL.BlendingFactorSrc sfactor, OpenTK.Graphics.OpenGL.BlendingFactorDest dfactor)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glBlendFunc((OpenTK.Graphics.OpenGL.BlendingFactorSrc)sfactor, (OpenTK.Graphics.OpenGL.BlendingFactorDest)dfactor);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glScissor")]
		public static void Scissor(Int32 x, Int32 y, Int32 width, Int32 height)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glScissor((Int32)x, (Int32)y, (Int32)width, (Int32)height);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLineWidth")]
		public static void LineWidth(Single width)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glLineWidth((Single)width);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glCreateShader")]
		public static Int32 CreateShader(OpenTK.Graphics.OpenGL.ShaderType type)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				return Delegates.glCreateShader((OpenTK.Graphics.OpenGL.ShaderType)type);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glCompileShader")]
		public static void CompileShader(Int32 shader)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glCompileShader((UInt32)shader);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
		public static void GetShader(Int32 shader, OpenTK.Graphics.OpenGL.ShaderParameter pname, [OutAttribute] out Int32 @params)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				unsafe
				{
					fixed (Int32* @params_ptr = &@params)
					{
						Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.OpenGL.ShaderParameter)pname, (Int32*)@params_ptr);
						@params = *@params_ptr;
					}
				}
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
		public static unsafe void GetShaderInfoLog(Int32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length, (StringBuilder)infoLog);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
		public static unsafe void GetProgramInfoLog(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length, (StringBuilder)infoLog);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glCreateProgram")]
		public static Int32 CreateProgram()
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				return Delegates.glCreateProgram();
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glAttachShader")]
		public static void AttachShader(Int32 program, Int32 shader)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glAttachShader((UInt32)program, (UInt32)shader);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glLinkProgram")]
		public static void LinkProgram(Int32 program)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glLinkProgram((UInt32)program);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
		public static void GetProgram(Int32 program, OpenTK.Graphics.OpenGL.ProgramParameter pname, [OutAttribute] out Int32 @params)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				unsafe
				{
					fixed (Int32* @params_ptr = &@params)
					{
						Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.OpenGL.ProgramParameter)pname, (Int32*)@params_ptr);
						@params = *@params_ptr;
					}
				}
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUseProgram")]
		public static void UseProgram(Int32 program)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glUseProgram((UInt32)program);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL.ActiveUniformType type, [OutAttribute] StringBuilder name)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				unsafe
				{
					fixed (Int32* length_ptr = &length)
					fixed (Int32* size_ptr = &size)
					fixed (OpenTK.Graphics.OpenGL.ActiveUniformType* type_ptr = &type)
					{
						Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ActiveUniformType*)type_ptr, (StringBuilder)name);
						length = *length_ptr;
						size = *size_ptr;
						type = *type_ptr;
					}
				}
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformLocation")]
		public static Int32 GetUniformLocation(Int32 program, String name)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				return Delegates.glGetUniformLocation((UInt32)program, (String)name);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1i")]
		public static void Uniform1(Int32 location, Int32 v0)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glUniform1i((Int32)location, (Int32)v0);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1f")]
		public static void Uniform1(Int32 location, Single v0)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glUniform1f((Int32)location, (Single)v0);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2f")]
		public static 
		void Uniform2(Int32 location, Single v0, Single v1)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glUniform2f((Int32)location, (Single)v0, (Single)v1);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
		public static void Uniform1(Int32 location, Int32 count, Single[] value)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				unsafe
				{
					fixed (Single* value_ptr = value)
					{
						Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)value_ptr);
					}
				}
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
		public static void Uniform2(Int32 location, Int32 count, Single[] value)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				unsafe
				{
					fixed (Single* value_ptr = value)
					{
						Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)value_ptr);
					}
				}
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
		public static void Uniform3(Int32 location, Int32 count, Single[] value)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				unsafe
				{
					fixed (Single* value_ptr = value)
					{
						Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)value_ptr);
					}
				}
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
		public static void Uniform4(Int32 location, Int32 count, Single[] value)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				unsafe
				{
					fixed (Single* value_ptr = value)
					{
						Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)value_ptr);
					}
				}
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
		public static 
		void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single[] value)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				unsafe
				{
					fixed (Single* value_ptr = value)
					{
						Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
					}
				}
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glActiveTexture")]
		public static 
		void ActiveTexture(OpenTK.Graphics.OpenGL.TextureUnit texture)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glActiveTexture((OpenTK.Graphics.OpenGL.TextureUnit)texture);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glBindTexture")]
		public static 
		void BindTexture(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 texture)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glBindTexture((OpenTK.Graphics.OpenGL.TextureTarget)target, (UInt32)texture);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetString")]
		public static String GetString(OpenTK.Graphics.OpenGL.StringName name)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				unsafe { return new string((sbyte*)Delegates.glGetString((OpenTK.Graphics.OpenGL.StringName)name)); }
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetError")]
		public static OpenTK.Graphics.OpenGL.ErrorCode GetError()
		{
			return Delegates.glGetError();
		}

		public static partial class Ext
		{
			[AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGenFramebuffersEXT")]
			public static void GenFramebuffers(Int32 n, [OutAttribute] out Int32 framebuffers)
			{
				#if DEBUG
				using (new ErrorHelper(GraphicsContext.CurrentContext))
				{
				#endif
					unsafe
					{
						fixed (Int32* framebuffers_ptr = &framebuffers)
						{
							Delegates.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
							framebuffers = *framebuffers_ptr;
						}
					}
					#if DEBUG
				}
					#endif
			}

			[AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glBindFramebufferEXT")]
			public static void BindFramebuffer(OpenTK.Graphics.OpenGL.FramebufferTarget target, Int32 framebuffer)
			{
				#if DEBUG
				using (new ErrorHelper(GraphicsContext.CurrentContext))
				{
				#endif
					Delegates.glBindFramebufferEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (UInt32)framebuffer);
					#if DEBUG
				}
					#endif
			}

			[AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glFramebufferTexture2DEXT")]
			public static void FramebufferTexture2D(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, Int32 texture, Int32 level)
			{
				#if DEBUG
				using (new ErrorHelper(GraphicsContext.CurrentContext))
				{
				#endif
					Delegates.glFramebufferTexture2DEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
					#if DEBUG
				}
					#endif
			}

			[AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glGenRenderbuffersEXT")]
			public static void GenRenderbuffers(Int32 n, [OutAttribute] out Int32 renderbuffers)
			{
				#if DEBUG
				using (new ErrorHelper(GraphicsContext.CurrentContext))
				{
				#endif
					unsafe
					{
						fixed (Int32* renderbuffers_ptr = &renderbuffers)
						{
							Delegates.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
							renderbuffers = *renderbuffers_ptr;
						}
					}
					#if DEBUG
				}
					#endif
			}

			[AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glBindRenderbufferEXT")]
			public static void BindRenderbuffer(OpenTK.Graphics.OpenGL.RenderbufferTarget target, Int32 renderbuffer)
			{
				#if DEBUG
				using (new ErrorHelper(GraphicsContext.CurrentContext))
				{
				#endif
					Delegates.glBindRenderbufferEXT((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (UInt32)renderbuffer);
					#if DEBUG
				}
					#endif
			}

			[AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glRenderbufferStorageEXT")]
			public static void RenderbufferStorage(OpenTK.Graphics.OpenGL.RenderbufferTarget target, OpenTK.Graphics.OpenGL.RenderbufferStorage internalformat, Int32 width, Int32 height)
			{
				#if DEBUG
				using (new ErrorHelper(GraphicsContext.CurrentContext))
				{
				#endif
					Delegates.glRenderbufferStorageEXT((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (OpenTK.Graphics.OpenGL.RenderbufferStorage)internalformat, (Int32)width, (Int32)height);
					#if DEBUG
				}
					#endif
			}

			[AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glFramebufferRenderbufferEXT")]
			public static void FramebufferRenderbuffer(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.RenderbufferTarget renderbuffertarget, Int32 renderbuffer)
			{
				#if DEBUG
				using (new ErrorHelper(GraphicsContext.CurrentContext))
				{
				#endif
					Delegates.glFramebufferRenderbufferEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
					#if DEBUG
				}
					#endif
			}

			[AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glCheckFramebufferStatusEXT")]
			public static 
			OpenTK.Graphics.OpenGL.FramebufferErrorCode CheckFramebufferStatus(OpenTK.Graphics.OpenGL.FramebufferTarget target)
			{
				#if DEBUG
				using (new ErrorHelper(GraphicsContext.CurrentContext))
				{
				#endif
					return Delegates.glCheckFramebufferStatusEXT((OpenTK.Graphics.OpenGL.FramebufferTarget)target);
					#if DEBUG
				}
					#endif
			}

			[AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glDeleteFramebuffersEXT")]
			public static 
			void DeleteFramebuffers(Int32 n, ref Int32 framebuffers)
			{
				#if DEBUG
				using (new ErrorHelper(GraphicsContext.CurrentContext))
				{
				#endif
					unsafe
					{
						fixed (Int32* framebuffers_ptr = &framebuffers)
						{
							Delegates.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
						}
					}
					#if DEBUG
				}
					#endif
			}

			[AutoGenerated(Category = "EXT_framebuffer_object", Version = "1.2", EntryPoint = "glDeleteRenderbuffersEXT")]
			public static 
			void DeleteRenderbuffers(Int32 n, ref Int32 renderbuffers)
			{
				#if DEBUG
				using (new ErrorHelper(GraphicsContext.CurrentContext))
				{
				#endif
					unsafe
					{
						fixed (Int32* renderbuffers_ptr = &renderbuffers)
						{
							Delegates.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
						}
					}
					#if DEBUG
				}
					#endif
			}
		}

		[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
		public static 
		unsafe void GetInteger(OpenTK.Graphics.OpenGL.GetPName pname, [OutAttribute] Int32* @params)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glGetIntegerv((OpenTK.Graphics.OpenGL.GetPName)pname, (Int32*)@params);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFlush")]
		public static 
		void Flush()
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glFlush();
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glViewport")]
		public static 
		void Viewport(Int32 x, Int32 y, Int32 width, Int32 height)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glViewport((Int32)x, (Int32)y, (Int32)width, (Int32)height);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
		public static 
		void GenTextures(Int32 n, [OutAttribute] out Int32 textures)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				unsafe
				{
					fixed (Int32* textures_ptr = &textures)
					{
						Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
						textures = *textures_ptr;
					}
				}
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameteri")]
		public static 
		void TexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32 param)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glTexParameteri((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32)param);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameterf")]
		public static 
		void TexParameter(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Single param)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glTexParameterf((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Single)param);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
		public static 
		void TexImage2D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr pixels)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
		public static 
		void GetTexImage(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr pixels)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glGetTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
		public static 
		void DeleteTextures(Int32 n, ref Int32 textures)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				unsafe
				{
					fixed (Int32* textures_ptr = &textures)
					{
						Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
					}
				}
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
		public static 
		void GenBuffers(Int32 n, [OutAttribute] out Int32 buffers)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				unsafe
				{
					fixed (Int32* buffers_ptr = &buffers)
					{
						Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
						buffers = *buffers_ptr;
					}
				}
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
		public static 
		void BufferData<T2>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[] data, OpenTK.Graphics.OpenGL.BufferUsageHint usage)
			where T2 : struct
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glBufferData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.BufferUsageHint)usage);
				}
				finally
				{
					data_ptr.Free();
				}
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
		public static 
		void BufferSubData(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, IntPtr data)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
		public static 
		void BufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
			where T3 : struct
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
				try
				{
					Delegates.glBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
				}
				finally
				{
					data_ptr.Free();
				}
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBindBuffer")]
		public static 
		void BindBuffer(OpenTK.Graphics.OpenGL.BufferTarget target, Int32 buffer)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glBindBuffer((OpenTK.Graphics.OpenGL.BufferTarget)target, (UInt32)buffer);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glVertexPointer")]
		public static 
		void VertexPointer(Int32 size, OpenTK.Graphics.OpenGL.VertexPointerType type, Int32 stride, IntPtr pointer)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glVertexPointer((Int32)size, (OpenTK.Graphics.OpenGL.VertexPointerType)type, (Int32)stride, (IntPtr)pointer);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glTexCoordPointer")]
		public static 
		void TexCoordPointer(Int32 size, OpenTK.Graphics.OpenGL.TexCoordPointerType type, Int32 stride, IntPtr pointer)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glTexCoordPointer((Int32)size, (OpenTK.Graphics.OpenGL.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
		public static 
		void DeleteBuffers(Int32 n, ref Int32 buffers)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				unsafe
				{
					fixed (Int32* buffers_ptr = &buffers)
					{
						Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
					}
				}
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
		public static 
		void ShaderSource(Int32 shader, Int32 count, String[] @string, ref Int32 length)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				unsafe
				{
					fixed (Int32* length_ptr = &length)
					{
						Delegates.glShaderSource((UInt32)shader, (Int32)count, (String[])@string, (Int32*)length_ptr);
					}
				}
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
		public static 
		unsafe void ShaderSource(UInt32 shader, Int32 count, String[] @string, Int32* length)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glShaderSource((UInt32)shader, (Int32)count, (String[])@string, (Int32*)length);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glPushClientAttrib")]
		public static 
		void PushClientAttrib(OpenTK.Graphics.OpenGL.ClientAttribMask mask)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glPushClientAttrib((OpenTK.Graphics.OpenGL.ClientAttribMask)mask);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelStoref")]
		public static 
		void PixelStore(OpenTK.Graphics.OpenGL.PixelStoreParameter pname, Single param)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glPixelStoref((OpenTK.Graphics.OpenGL.PixelStoreParameter)pname, (Single)param);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelStorei")]
		public static 
		void PixelStore(OpenTK.Graphics.OpenGL.PixelStoreParameter pname, Int32 param)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glPixelStorei((OpenTK.Graphics.OpenGL.PixelStoreParameter)pname, (Int32)param);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
		public static 
		void ReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [OutAttribute] IntPtr pixels)
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)pixels);
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFinish")]
		public static 
		void Finish()
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glFinish();
				#if DEBUG
			}
				#endif
		}

		[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glPopClientAttrib")]
		public static 
		void PopClientAttrib()
		{
			#if DEBUG
			using (new ErrorHelper(GraphicsContext.CurrentContext))
			{
			#endif
				Delegates.glPopClientAttrib();
				#if DEBUG
			}
				#endif
		}
	}
}