#region Copyright & License Information
/*
 * Copyright 2007-2020 The OpenRA Developers (see AUTHORS)
 * This file is part of OpenRA, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version. For more
 * information, see COPYING.
 */
#endregion

using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Media;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;

namespace OpenRA
{
	// Minimal SDL wrapper to work around SDL2-CS requiring netstandard2.0
	static class SDL
	{
		struct INTERNAL_SDL_MessageBoxButtonData
		{
			public SDL_MessageBoxButtonFlags flags;
			public int buttonid;
			public IntPtr text;
		}

		struct INTERNAL_SDL_MessageBoxData
		{
			public SDL_MessageBoxFlags flags;
			public IntPtr window;
			public IntPtr title;
			public IntPtr message;
			public int numbuttons;
			public IntPtr buttons;
			public IntPtr colorScheme;
		}

		[Flags]
		public enum SDL_MessageBoxButtonFlags : uint
		{
			SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 1,
			SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 2,
		}

		public struct SDL_MessageBoxButtonData
		{
			public SDL_MessageBoxButtonFlags flags;
			public int buttonid;
			public string text;
		}

		[Flags]
		public enum SDL_MessageBoxFlags : uint
		{
			SDL_MESSAGEBOX_ERROR = 16,
			SDL_MESSAGEBOX_WARNING = 32,
			SDL_MESSAGEBOX_INFORMATION = 64,
		}

		public struct SDL_MessageBoxData
		{
			public SDL_MessageBoxFlags flags;
			public string title;
			public string message;
			public int numbuttons;
			public SDL_MessageBoxButtonData[] buttons;
		}

		public static unsafe int SDL_ShowMessageBox(ref SDL_MessageBoxData messageboxdata, out int buttonid)
		{
			var messageboxdata1 = new INTERNAL_SDL_MessageBoxData
			{
				flags = messageboxdata.flags,
				window = IntPtr.Zero,
				title = INTERNAL_AllocUTF8(messageboxdata.title),
				message = INTERNAL_AllocUTF8(messageboxdata.message),
				numbuttons = messageboxdata.numbuttons
			};

			var messageBoxButtonDataArray = new INTERNAL_SDL_MessageBoxButtonData[messageboxdata.numbuttons];
			for (var index = 0; index < messageboxdata.numbuttons; ++index)
			{
				messageBoxButtonDataArray[index] = new INTERNAL_SDL_MessageBoxButtonData()
				{
					flags = messageboxdata.buttons[index].flags,
					buttonid = messageboxdata.buttons[index].buttonid,
					text = INTERNAL_AllocUTF8(messageboxdata.buttons[index].text)
				};
			}

			int num;
			fixed (INTERNAL_SDL_MessageBoxButtonData* messageBoxButtonDataPtr = &messageBoxButtonDataArray[0])
			{
				messageboxdata1.buttons = (IntPtr) (void*) messageBoxButtonDataPtr;
				num = INTERNAL_SDL_ShowMessageBox(ref messageboxdata1, out buttonid);
			}

			Marshal.FreeHGlobal(messageboxdata1.colorScheme);
			for (var index = 0; index < messageboxdata.numbuttons; ++index)
				SDL_free(messageBoxButtonDataArray[index].text);

			SDL_free(messageboxdata1.message);
			SDL_free(messageboxdata1.title);
			return num;
		}

		static IntPtr INTERNAL_AllocUTF8(string str)
		{
			if (string.IsNullOrEmpty(str))
				return IntPtr.Zero;

			byte[] bytes = Encoding.UTF8.GetBytes(str + "\0");
			IntPtr destination = SDL_malloc((IntPtr) bytes.Length);
			Marshal.Copy(bytes, 0, destination, bytes.Length);
			return destination;
		}

		[DllImport("SDL2", EntryPoint = "SDL_ShowMessageBox", CallingConvention = CallingConvention.Cdecl)]
		static extern int INTERNAL_SDL_ShowMessageBox(ref INTERNAL_SDL_MessageBoxData messageboxdata, out int buttonid);

		[DllImport("SDL2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr SDL_malloc(IntPtr size);

		[DllImport("SDL2", CallingConvention = CallingConvention.Cdecl)]
		static extern void SDL_free(IntPtr memblock);
	}

	class WindowsLauncher
	{
		static Process gameProcess;

		// Constants to be replaced by the wrapper / compilation script
		const string ModID = "MOD_ID";
		const string DisplayName = "DISPLAY_NAME";
		const string FaqUrl = "FAQ_URL";

		[STAThread]
		static int Main(string[] args)
		{
			if (args.Any(x => x.StartsWith("Engine.LaunchPath=", StringComparison.Ordinal)))
				return RunGame(args);

			return RunInnerLauncher(args);
		}

		static int RunGame(string[] args)
		{
			var launcherPath = Assembly.GetExecutingAssembly().Location;
			var directory = Path.GetDirectoryName(launcherPath);
			Directory.SetCurrentDirectory(directory);

			AppDomain.CurrentDomain.UnhandledException += (_, e) => ExceptionHandler.HandleFatalError((Exception)e.ExceptionObject);

			try
			{
				return (int)Game.InitializeAndRun(args);
			}
			catch (Exception e)
			{
				ExceptionHandler.HandleFatalError(e);
				return (int)RunStatus.Error;
			}
		}

		static int RunInnerLauncher(string[] args)
		{
			var launcherPath = Assembly.GetExecutingAssembly().Location;
			var launcherArgs = args.ToList();

			if (!launcherArgs.Any(x => x.StartsWith("Engine.LaunchPath=", StringComparison.Ordinal)))
				launcherArgs.Add("Engine.LaunchPath=\"" + launcherPath + "\"");

			if (!launcherArgs.Any(x => x.StartsWith("Game.Mod=", StringComparison.Ordinal)))
				launcherArgs.Add("Game.Mod=" + ModID);

			var psi = new ProcessStartInfo(launcherPath, string.Join(" ", launcherArgs));

			try
			{
				gameProcess = Process.Start(psi);
			}
			catch
			{
				return 1;
			}

			if (gameProcess == null)
				return 1;

			gameProcess.EnableRaisingEvents = true;
			gameProcess.Exited += GameProcessExited;
			gameProcess.WaitForExit();
			return 0;
		}

		static void ShowErrorDialog()
		{
			var viewLogs = new SDL.SDL_MessageBoxButtonData
			{
				buttonid = 2,
				text = "View Logs",
				flags = SDL.SDL_MessageBoxButtonFlags.SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT
			};

			var viewFaq = new SDL.SDL_MessageBoxButtonData
			{
				buttonid = 1,
				text = "View FAQ"
			};

			var quit = new SDL.SDL_MessageBoxButtonData
			{
				buttonid = 0,
				text = "Quit",
				flags = SDL.SDL_MessageBoxButtonFlags.SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT
			};

			var dialog = new SDL.SDL_MessageBoxData
			{
				flags = SDL.SDL_MessageBoxFlags.SDL_MESSAGEBOX_ERROR,
				title = "Fatal Error",
				message = DisplayName + " has encountered a fatal error and must close.\nRefer to the crash logs and FAQ for more information.",
				buttons = new[] { quit, viewFaq, viewLogs },
				numbuttons = 3
			};

			int buttonid = 0;
			if (SDL.SDL_ShowMessageBox(ref dialog, out buttonid) < 0)
				Exit();

			switch (buttonid)
			{
				case 0: Exit(); break;
				case 1:
				{
					try
					{
						Process.Start(FaqUrl);
					}
					catch { }
					break;
				}
				case 2:
				{
					try
					{
						Process.Start(Platform.ResolvePath("^", "Logs"));
					}
					catch { }
					break;
				}
			}
		}

		static void GameProcessExited(object sender, EventArgs e)
		{
			if (gameProcess.ExitCode != (int)RunStatus.Success)
				ShowErrorDialog();

			Exit();
		}

		static void Exit()
		{
			Environment.Exit(0);
		}
	}
}
